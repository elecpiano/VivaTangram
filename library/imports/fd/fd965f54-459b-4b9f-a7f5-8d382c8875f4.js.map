{"version":3,"sources":["../../../../assets/Script/assets/Script/ListItemController.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../assets/Script","sourcesContent":["\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ListItemController extends cc.Component {\n\n    //#region Properties\n\n    draw: cc.Graphics;\n    DRAW_DURATION: number = 0.4;\n    drawTime: number = 0;\n    drawing: boolean = false;\n\n    Dots = Array<cc.Vec2>();\n    Shapes = Array<string>();\n    Frames = Array<string>();\n\n    Route = Array<string>();\n\n    LINE_WIDTH = 15;\n    STROKE_COLOR = \"#353535\";\n    FILL_COLOR = \"#ffda4c\";\n    TangramColors:string[] = [\"#ffda4c\",\"#52cad1\",\"#ff493a\",\"#3968bc\",\"#ff8e2f\",\"#ca4c89\",\"#55d723\"];\n\n    ShowShape = false;\n\n    //#endregion\n\n    //#region Lifecycle\n\n    start () {\n        this.draw = this.getComponent(cc.Graphics);\n        if (!this.draw) {\n            this.draw = this.addComponent(cc.Graphics);\n        }\n\n        this.draw.fillColor = cc.hexToColor(this.FILL_COLOR);\n        this.draw.lineWidth = this.LINE_WIDTH;\n        this.draw.strokeColor =  cc.hexToColor(this.STROKE_COLOR);\n    }\n\n    update (dt) {\n        if (this.drawing) {\n            if (this.drawTime > this.DRAW_DURATION) {\n                this.FinishDraw();\n            }\n            else{\n                this.UpdateDraw(dt);\n            }\n        }\n    }\n\n    //#endregion\n\n    //#region Frame\n\n    Show(dots:Array<cc.Vec2>, shapes: Array<string>, frames: Array<string>, showShape){\n        this.Dots = dots;\n        this.Shapes = shapes;\n        this.Frames = frames;\n        this.ShowShape = showShape;\n        this.StartDraw();\n    }\n\n    StartDraw(){\n        this.draw.clear();\n\n        this.drawTime = 0;\n        this.drawing = true;\n\n        //scale animation\n        this.node.setScale(0.2,0.2);\n        this.node.runAction(cc.sequence(\n            cc.scaleTo(this.DRAW_DURATION * 0.5, 0.38, 0.38),\n            cc.scaleTo(this.DRAW_DURATION * 0.5, 0.3, 0.3)\n        ));\n    }\n\n    UpdateDraw(dt: number){\n        this.drawTime += dt;\n        \n        this.draw.clear();\n\n        /* if alpha is greater than 255, it will re-count from 256 */\n        let alpha = 255 * Math.min(this.drawTime,this.DRAW_DURATION)/this.DRAW_DURATION;\n        this.DrawFrame(alpha);\n\n        if (this.ShowShape) {\n            this.DrawSahpe(alpha);\n        }\n    }\n\n    DrawFrame(alpha: number){\n        for (let i = 0; i < this.Frames.length; i++) {\n            let frameStr = this.Frames[i];\n            let pointList = frameStr.split(\",\");\n\n            let index = 0;\n            let pointFrom = this.Dots[pointList[index]];\n            this.draw.moveTo(pointFrom.x,pointFrom.y);\n\n            while (index < pointList.length - 1) {\n                // let pointFrom = this.Dots[pointList[index]];\n                let pointDest = this.Dots[pointList[index+1]];\n                // this.draw.moveTo(pointFrom.x,pointFrom.y);\n                this.draw.lineTo(pointDest.x,pointDest.y);\n                index ++;\n            }\n            this.draw.strokeColor = this.draw.strokeColor.setA(alpha);\n            this.draw.stroke();\n        }\n    }\n\n    DrawSahpe(alpha: number){\n        for (let i = 0; i < 7; i++) {\n            let shapeString = this.Shapes[i];\n            let dots = shapeString.split(\",\");\n\n            let startX = 0;\n            let startY = 0;\n    \n            let idx = 0;\n            while (idx < dots.length) {\n                let x = this.Dots[Number(dots[idx])].x;\n                let y = this.Dots[Number(dots[idx])].y;\n                if (idx == 0) {\n                    this.draw.moveTo(x,y);\n                    startX = x;\n                    startY = y;\n                }\n                else if(idx == (dots.length/ - 2)){\n                    this.draw.lineTo(startX,startY);\n                }\n                else{\n                    this.draw.lineTo(x,y);\n                }\n                idx ++;\n            }\n    \n            this.draw.close();\n            this.draw.fillColor = cc.hexToColor(this.TangramColors[i]);\n            this.draw.fillColor = this.draw.fillColor.setA(alpha);\n            this.draw.fill();\n        }\n    }\n\n    DrawFrame2(dots:Array<cc.Vec2>, frames:string[]){\n        this.Dots = dots;\n\n        this.draw.clear();\n\n        this.draw.lineWidth = this.LINE_WIDTH;\n        this.draw.strokeColor =  cc.color(225,225,225);\n\n        //frame list\n        this.Frames = frames;\n\n        this.drawTime = 0;\n        this.drawing = true;\n    }\n\n    UpdateDraw2(dt: number){\n        this.drawTime += dt;\n        \n        for (let i = 0; i < this.Frames.length; i++) {\n            let frameStr = this.Frames[i];\n            let pointList = frameStr.split(\",\");\n\n            let index = 0;\n            while (index < pointList.length) {\n                let pointFrom = this.Dots[pointList[index]];\n                let pointDest: cc.Vec2 = null;\n\n                if (index == pointList.length - 1) {\n                    pointDest = this.Dots[pointList[0]];\n                }\n                else{\n                    pointDest = this.Dots[pointList[index+1]];\n                }\n                \n                let pointTo = pointFrom.lerp(pointDest, this.drawTime/this.DRAW_DURATION);\n\n                this.draw.moveTo(pointFrom.x,pointFrom.y);\n                this.draw.lineTo(pointTo.x,pointTo.y);\n                this.draw.stroke();\n                index ++;\n            }\n        }\n\n    }\n\n    FinishDraw(){\n        this.drawing = false;\n        this.drawTime = 0;\n    }\n\n    ClearDraw(){\n        this.draw.clear();\n    }\n\n    //#endregion\n\n    //#region Test\n\n\n    //#endregion\n}\n"]}